{"pages":[],"posts":[{"title":"更优的文件存储","text":"Part 0：前言&emsp;&emsp;基于学校已有的$FTP$文件存储系统的设计构想，利用机房已有的有限资源建立起了内网服务性能更优的文件存储方式（一下简称 NP）。本文将简单地进行$FTP$和$NP$相关数据的对比，供$OIer$使用参考。&emsp;&emsp;搭建内网文件存储介质的初心是为$OIer$提供一个 绝对免费的 优质“内网网盘”，请各位同学珍惜已有的资源，共同维护服务器的稳定运行。 Part 1：NP VS FTP $NP$ $FTP$ 物理内存大小 256GB 100GB 最大传输速度 100Mbs(=12.5MB/s) 10Mbs(=1.25MB/s) 客户端支持操作系统 Win XP/7/10 Win 7/10Linux 文件传输协议 NT FTP &emsp;&emsp;结合以上表格中数据的分析比较，我们可以发现学校提供的FTP服务器具有通用性强、适用范围广的特点。但世上没有完美的东西，在我们的实际应用中，校园FTP基本可以满足小文件（.pdf/.doc/.cpp等）的存储和下载需求，但对于较大的文件（如：安装包）便显得无能为力。并且，由于$FTP$文件传输协议本身缺陷的原因，当我们在同一外网IP服务器范围内同时使用两台及以上的电脑下载同一个文件时，便会发生数据包传输交叉丢失的尴尬局面。&emsp;&emsp;针对这些问题，基于 Win10 系统 NT 协议的 NP 则展现出了它的优点：内网中的文件传输会寻找最近的公共服务器并使用Mac地址替代IP地址作为文件追踪的依据；同时，文件中继行为的存在大大加速了多成员下载文件时，网络的分配效率。&emsp;&emsp;总之，相信$NP$能给大家在$NanYa$内网环境中带来更好的用户体验。 &emsp;&emsp;同时，基于 Win10 外网服务协议，我们将在$Nanya$主服务器有限的开放权限下，尽快地完成外网文件访问模块的研发。如果您有好的建议或方法可避开服务器防火墙策略造成的影响，欢迎与作者取得联系 &ensp;3315663889@qq.com&ensp;。 Part 2：NP 使用说明&emsp;&emsp;基于WIndows组件的网络文件数据库最大优点即不需要额外安装辅助工具。在计算机地址栏中输入： \\172.55.25.41（注意：\\ 为反斜线）&emsp;&emsp;使用公共账号进行登录后即可使用。 账号：nanyaoier密码：noip2019rp++ Part 3：相关说明&emsp;&emsp;为方便使用，本文作者极力推荐将 $NP$ 主盘位置保存在计算机中。&emsp;&emsp;&emsp;&emsp;Step 1：打开 文件资源管理器 ，选择 计算机 -&gt; 映射网络驱动器 &emsp;&emsp;&emsp;&emsp;Step 2：在 网络位置 -&gt; 文件夹 中输入：\\\\172.55.25.41\\OIer 网盘。也可以直接复制之前我们打开的 NP 的文件夹地址。驱动器盘符可以根据自己的实际情况来设置。&emsp;&emsp;&emsp;&emsp;Step 3：在文件资源管理器中打开我们刚刚新建的网络地址即可。 Part 4：管理说明&emsp;&emsp;$NP$目前为试运行阶段，服务器介质及文件传输节点的稳定性取决于学校内网环境。为规范服务器使用方式，暂定规则如下： 1、禁止向$NP$传输包括游戏在内的一切娱乐软件。2、服务器可以作为个人使用的 软件&ensp;视频&ensp;图片 等文件的存储地址。3、请按照$NP$内预置在根目录下的文件结构存储个人数据，违规者后果自行承担。4、请勿将$NP$的相关信息（包括：IP地址、账号、密码）泄露给非 NanYaOIer 同学。 &emsp;&emsp;服务器规则持续更新中，最终解释权归 Dr.Ming 所有。$$最后一次更新时间：2019.7.9$$","link":"/NY-1/"},{"title":"Gedit 快速入门","text":"Part 0：前言&emsp;&emsp;为方便各位同学在最初接触 Linux 系统时能够简单快速入门，本文章工作环境以CCF官方提供的 NOI_Linux 为准，在之后的文章中，我们将使用更加便捷的 ubuntu-18.10 书写教程，如有不便，望各位读者理解。&emsp;&emsp;本文中介绍的 Gedit 编辑器可以满足大部分 OI 选手的需求，另外关于 Vim 的介绍，将在后期的文章中提到。 Part 1：启动 Gedit&emsp;&emsp;我们在登录 NOI Linux 后，在主界面以此左上角依次找到： 应用程序 -&gt; 附件 -&gt; 文本编辑器&emsp;&emsp;于是，我们进入了 Gedit 编辑器。 Part 2：配置编译环境&emsp;&emsp;Gedit 编辑器不同于 Dev C++ 的一点即为：它不拥有自带的编译配置文件。这意味着我们在使用它的同时，需要自己给它添加编译配置。&emsp;&emsp;我们在添加编译配置文件之前需要更改一下 Gedit 的设置选项。先在 编辑 -&gt; 首选项 -&gt; 插件 中，勾选所有插件，点击关闭来保存设置。&emsp;&emsp;接着进入 工具 -&gt; Manage External Tools ,点击左下角的加号，新建一个外部工具（默认名称为 New tool，可以不更改名字）&emsp;&emsp;将我们刚才新建的外部工具右侧的编辑栏内的内容改为： 123!/bin/shcd $GEDIT_CURRENT_DOCUMENT_DIRgnome-terminal -x bash -c &quot;g++ $GEDIT_CURRENT_DOCUMENT_NAME -Wall -o 1 &amp;&amp; time ./1;read&quot; &emsp;&emsp;最后，点击右侧快捷键设置栏，根据个人习惯设置 编译+运行 的快捷键。为避免因为键位冲突造成的指令错位，个人建议使用 F5 作为编译快捷键。 Part 3：写下第一个程序&emsp;&emsp;至此我们已经完成了对 Gedit 外部工具编译环境的配置工作，便可以快乐的写下第一个程序：Hello World 1234567#include &lt;bits/stdc++.h&gt;using namespace std;int main(){ printf(\"Hello World!\"); return 0;} &emsp;&emsp;当我们满怀激动的写完代码按下 F5 进行编译时，在 Linux 弹出了的终端中显示了错误信息：&emsp;&emsp;不用紧张，这其实是因为我们没有将文件保存的原因。关闭终端后，使用 Ctrl+S 将文件保存为 new.cpp （文件名可自拟）；注意：我们需要在输入文件名的时候手动输入 .cpp 的后缀。重新按下 F5 ，就可以看到我们写下的程序的运行结果了！ Part 4：相关说明&emsp;&emsp;当我们在 NOIP 考场时，常常是先在指定的选手工作目录建立 cpp 文件后再将其打开。由于初学者对于 Linux 系统缺少足够的了解，常常会误用 GUIDE 打开文件。 &emsp;&emsp;其实我们并不需要太多的操作，只需要在打开文件的时候右键文件，选择 gedit 即可。","link":"/NL-1/"}],"tags":[{"name":"Nanya","slug":"Nanya","link":"/tags/Nanya/"},{"name":"NOI_Linux","slug":"NOI-Linux","link":"/tags/NOI-Linux/"},{"name":"Gedit","slug":"Gedit","link":"/tags/Gedit/"}],"categories":[]}